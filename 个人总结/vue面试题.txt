1.怎么设置路由缓存
<keep-alive>
  	<router-view  v-if="$route.meta.keepAlive" ></router-view>
</keep-alive>
<router-view  v-if="!($route.meta.keepAlive)"></router-view>
通过设置路由元信息的keepAlive为true表示缓存


2.如果我现在有A组件,B组件,C组件均设置为缓存
如何实现
1.	第一次进入路由   A->B->C 		A.B.C均加载
2.  然后随意进入  A,B,C  			A.B.C均缓存
3.  在A 页面中触发某一个事件,让C页面不缓存,数据可以更新,
4.  此时进入C页面 , 不缓存,请求数据更新, 
5.  离开C页面后在进入C页面,缓存,此时不请求数据

3.如何实现一个组件的强制更新
方法一: this.$foursUpdate();
方法二:设置v-if='false'
在this.$nextTick(()=>{
	设置 v-if='true'
})

4.常用的导航守卫有哪些,具体怎么使用的
全局守卫有 beforeEach和afterEach
组件内守卫有
进入路由时触发,通过vm访问组件实例,相当于this
beforeRouteEnter (to, from, next) {
  next(vm => {
    // 通过 `vm` 访问组件实例
  })
}
离开路由时触发,
beforeRouteLeave (to, from , next) {
  const answer = window.confirm('Do you really want to leave? you have unsaved changes!')
  if (answer) {
    next()
  } else {
    next(false)
  }
}


5.组件直接如何传值,子组件向父组件传值,父组件向子组件传值
子组件通过自定义事件向父组件传值, this.$emit('事件名',传值);
父组件通过向组件标签绑定数据项子组件传值,子组件通过props接收


6.如何封装一个axios,说说大致的思路
请求拦截器,请求超时,响应拦截器,根据HTTP状态码设置不同的errMessage,设置catch

7.如何进行跨域请求
1. jsonp,说说jsonp的原理
2. 本地代理,webpack中配置 proxyTable

7.es6的相关知识
	promise的使用
	async 和  await 的使用
	for of的使用
	扩展运算符  ...
	结构赋值

8.缓存相关
localStorage	永久存储
sessionStorage  临时存储
cookie			设置过期时间

9.函数中this的指向,箭头函数中的this指向
函数中的this时钟指向调用函数的那个对象
箭头函数中的this相当于其父级函数的this

10.父组件如何动态给子组件传值?
1.子组件可以通过watch监听数据即可,
2.父组件调用子组件的方法.

===========================================================================================
什么是原型链?
每一个对象都会有自己的原型(prototype),new出的对象的__proto__会执行原对象的prototype;
内置构造函数的__proto__均执行Function的prototype;
原型链的终点是Object.prototype;
var arr=new Array();
arr.__proto__===Array.prototype;
Array.__proto__===Function.prototype;
Function.__proto__===Function.prototype;

-------------------------------------------------------------------------------------
什么是闭包?
闭包就是能够读取其他函数内部变量的函数。
function fn(){
  var a=1;
  function b(){
    a++;
    console.log(a);
  }
  console.log(a);
  return b;
}
var c=fn();//通过闭包访问fn内部变量c的值并储存
c();//实际调用b();输出2
c();//输出3,可以储存a的值并改变

-------------------------------------------------------------------------------------
图片的懒加载和预加载原理?
懒加载:加img标签的src置空,可以将向真正的src付给data-src属性,当触发某个事件的时候加src赋值为正确的路径
预加载: 1.css预加载,用background-image样式加载图片;
    2.js预加载,var img=new Image();img.src='xxx';

-------------------------------------------------------------------------------------
跨域?
jsonp的原理:利用script的src没有同源限制的特性,将接口通过动态创建script标签,并将src执向接口,需要后台接口触发一个js回调函数,从而实现跨域.
代理请求:搭建一个本地服务器转发请求实现跨域效果.
CORS跨域:暂不了解.

-------------------------------------------------------------------------------------
函数节流和函数防抖?
函数节流:当连续触发函数时,函数在n秒内只会执行一次.
函数防抖:当触发函数后n秒内函数只能执行一次,若在n秒内再次触发函数,则会从新计算时间.
节流
/*
 * 函数节流
 * @method debounce
 * @param {funciton} fn   需要执行的函数
 * @param {Number} wait   需要等待的时间,毫秒
 * @returns {undefined}
 */
function debounce(fn,wait){
  var timeout;
  return function(){
    var context=this;
    var args=arguments;
    if(!timeout){
      timeout=setTimeout(function(){
        timeout=null;
        fn.apply(context,args);
      },wait)
    }
  }
}

防抖
/*
 * 函数防抖
 * @method debounce
 * @param {funciton} fn   需要执行的函数
 * @param {Number} wait   需要等待的时间,毫秒
 * @returns {undefined}
 */
function debounce(fn,wait){
  var timeout;
  return function(){
    var context=this;
    var args=arguments;
    if(timeout) clearTimeout(timeout);
    timeout=setTimeout(function(){
      fn.apply(context,args);
    },wait)
  }
}

-------------------------------------------------------------------------------------
对象的浅拷贝和深拷贝
var obj={
    'name':'张三',
    'age':20,
    'arr':{
      'name':'张三',
    'age':20,
    }
  }
浅拷贝
var obj2=obj;
obj2.name='李四';
console.log(obj.name);//李四
console.log(obj2.name);//李四
深拷贝
function clone(obj1){
  if(typeof obj1==='object'){
    var obj=obj1 instanceof Array?[]:{}
    for(var attr in obj1){
      if( typeof obj1[attr]==='object'){
        obj[attr]=clone(obj1[attr]);
      }else{
        obj[attr]=obj1[attr];
      }
    }
    return obj;
  }else{
    return obj1;
  }
}
var obj2=clone(obj);
obj2.name='李四';
console.log(obj.name);//张三
console.log(obj2.name);//李四

-------------------------------------------------------------------------------------
call,apply,bind的实现原理

call的实现原理
Function.prototype.call2=function(content){
  // 在对象身上绑定函数,使this指向改对象
  content.fn=this;
  //储存参数
  var args=[];
  for(var i=1,len=arguments.length;i<len;i++){
    args.push(arguments[i]);
  }
  //执行该函数
  var str="content.fn("+args+")";
  eval(str);
  //清空函数
  content.fn=null;
}

apply的实现原理
Function.prototype.apply2=function(content){
  // 在对象身上绑定函数,使this指向改对象
  content.fn=this;
  //储存参数
  var args=arguments[1];
  //执行该函数
  var str="content.fn("+args+")";
  eval(str);
  //清空函数
  content.fn=null;
}

bind的实现原理
Function.prototype.bind2=function(content){
  //保存当前this;
  var that=this;
  return function(){
    // 在对象身上绑定函数,使this指向改对象
    content.fn=that;
    // //执行该函数
    var str="content.fn("+Array.from(arguments)+")";
    eval(str);
    content.fn=null;
  }
}
-------------------------------------------------------------------------------------
如何让伪数组转为数组
var args=arguments;
1.for循环
2.Array.prototype.slice.call(args);//改变this指向
3.args.__proto__ = Array.prototype;//改变原型链
4.Array.from(args);//es6方法

-------------------------------------------------------------------------------------
js同步和异步,宏任务和微任务
setTimeout(function(){
        console.log('1')
    });
 
    new Promise(function(resolve){
        console.log('2');
        resolve();
    }).then(function(){
        console.log('3')
    });
 
    console.log('4');

结果 2,4,3,1

首先执行setTimeout,将回调放入宏任务eventqueue中,再执行promise,立即输入2,将then方法放入微任务的eventqueue中,立即输入4,同步任务执行完毕,先执行异步微任务eventqueue,输入3,再输入1;

总结:
1.先执行同步任务,再执行异步任务,
2.当同步任务执行完毕后,先执行微任务回调,再执行宏任务回调,
3.当异步任务执行完毕后,再执行同步任务,事件循环.
