javaScript中的ajax

get 请求
var xhr=new XMLHttpRequest();//获取xhr对象

xhr.open('get',"delete.php?id="+id+"",true);//请求  true表示异步请求
xhr.send();//发送请求
xhr.onreadystatechange=function(){//监听请求状态
	if(xhr.readyState==4){ //4表示请求已完成

		data=xhr.responseText;//获取字符串形式的响应数据

	}
}

post请求
var xhr=new XMLHttpRequest();//获取xhr对象
xhr.open('post',url,true);//请求  true表示异步请求

xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;");
xhr.send(data);//发送请求 data是 a=1&b=2 格式
xhr.onreadystatechange=function(){//监听请求状态
    if(xhr.readyState==4){ //4表示请求已完成
        if(xhr.status===200){//请求成功
            var res=xhr.responseText;//获取字符串形式的响应数据
            successCallback(res);//成功回调
        }else{//请求失败
            errorCallback(xhr.status);//失败回调
        }
    }
}

===========================================================================
jquery中的ajax

$.get('delete.php',{id:id},function(res){
		if(res){
			that.parent().parent().hide();
		}
 	});

===========================================================================
angular中的ajax
需要依赖注入http模块

$http({
	 url:url,           //请求的url路径  
     method:method,    //GET/DELETE/HEAD/JSONP/POST/PUT  
     params:params ,   //转为  ?param1=xx1¶m2=xx2的形式  
     data: data        //包含了将被当做消息体发送给服务器的数据，通常在POST请求时使用  
     cache:true        //将数据缓存起来,再次请求相同数据可以不用请求
	}).then(function success(res){//请求成功回调函数
		alert('成功')
		console.log(res);
	},function error(res){//请求失败回调函数
		alert("失败")
		console.log(res);
	});

简单方法
$http.get("1.php").then(function success(res){
			alert('成功')
		 	console.log(res);
		}, function error(res){
			alert("失败")
		 	console.log(res);
		})

php中接受angular  post方法传来的数据
$str=file_get_contents("php://input");
$post=json_decode($str,true);

=================================================================================
jsonp请求
//动态创建script标签
var script = document.createElement("script");
地址为请求地址,带上回调函数callback=jsonpCallback
script.src =url+'?callback=jsonpCallback';//带上回调函数
document.body.insertBefore(script, document.body.firstChild);

function jsonpCallback(res){
	console.log(res);
  
}

服务端
<?php 
$data='1112221111';

if($_GET['callback']){//有callback表示jsonp请求
	echo "{$_GET['callback']}({$data})";
}else{
	echo $data;
}
 ?>

==============================================================================
 vue中的http请求
 http请求
下载模块
npm install vue-resource --save-dev
引入模块
import VueResource from 'vue-resource'
启动模块
Vue.use(VueResource)
使用http请求
get请求
this.$http.get(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})

post请求
this.$http.post(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})

jsonp请求
this.$http.jsonp(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})
=========================================================================
axios的使用
安装
npm 安装			npm install axios
bower安装 		bower install axios
cdn安装			<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

get请求
axios.get('请求地址',{
  params:{
    参数,
  }
})
  .then(function (response) {//成功回调
    console.log(response.data);//响应数据
    console.log(response.status);//http状态码
    console.log(response.statusText);//http状态信息
    console.log(response.headers);//响应头
    console.log(response.config);//是为请求提供的配置信息
  })
  .catch(function (error) {//失败回调
    console.log(error);
  })


post请求
axios.post('/user', {//参数
    firstName: 'Fred',
    lastName: 'Flintstone'
  })
  .then(function (response) {//成功回调
    console.log(response);
  })
  .catch(function (error) {/失败回调
    console.log(error);
  })

执行多个并发请求(同时请求)
//请求一
function getUserAccount() {
  return axios.get('/user/12345');
}
//请求二
function getUserPermissions() {
  return axios.get('/user/12345/permissions');
}

axios.all([getUserAccount(), getUserPermissions()])
  .then(axios.spread(function (acct, perms) {
    // 两个请求现在都执行完成
  }));

拦截器
// 添加请求拦截器
var myInterceptor=axios.interceptors.request.use(function (config) {
    // 在发送请求之前做些什么
    return config;
  }, function (error) {
    // 对请求错误做些什么
    return Promise.reject(error);
  });

// 添加响应拦截器
var myInterceptor=axios.interceptors.response.use(function (response) {
    // 对响应数据做点什么
    return response;
  }, function (error) {
    // 对响应错误做点什么
    return Promise.reject(error);
  });
移除拦截器
axios.interceptors.request.eject(myInterceptor);
