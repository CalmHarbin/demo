<?php
常量
__ROOT__ 项目目录
__STATIC__ 项目目录下的static目录
__JS__项目目录下的static/js目录
__CSS__项目目录下的static/css目录

1.安装
git clone https://github.com/top-think/think.git 要存储的地址;
或者直接下载源码包

目录结构
application 	应用目录
	index 		前台目录
		controller	控制器
		model		数据模型
		view 		页面
	admin 		后台
extend 			扩展类库目录
public			静态资源和入口文件
	static		存放静态资源,如css,js,img
	index.php 	入口文件
runtime			网站运行临时目录
tests 			测试目录
thinkphp 		核心文件
	lang 		语言包
	library		TP核心文件
	tpl 		模板文件
vendor 			第三方扩展目录

开启调试模式
C:\wamp64\www\tp5\application\config.php
'app_debug'              => true,

创建一个控制器
C:\wamp64\www\tp5\application\index\User.php
//申明命名空间
namespace app\index\controller;
//申明控制器
class User{
	//方法
	public function index(){
		return '我是user控制器';
	}
}
访问
			 		 		入口文件  模块  控制器  方法
http://localhost/tp5/public/index.php/Index/User/index
调用当前控制器
调用当前控制器的test方法
1.$this->test();
2.self::test();
3.类名::test();
4使用系统函数
action('test');

调用不同控制器的方法
action('模块/控制器/方法')

跨控制器调用方法
前台Index控制器调用后台Index控制器的say方法
1.使用命名空间
$model=new \app\admin\controller\Index;//实例化控制器
$model->say();//使用
2.使用use
use \app\admin\controller\Index as AdminIndex;//重名需要起别名
$model=new AdminIndex;
$model->say();
3.使用Controller方法
				   模块  控制器
$model=Controller('admin/Index');
$model->say();

配置文件
1.惯例配置
	C:\wamp64\www\tp5\thinkphp\convention.php
读取配置文件
	通过系统函数读取config(key);
	通过config类的get方法读取\think\Config::get(key);

2.应用配置
	C:\wamp64\www\tp5\application\config.php

3扩展配置
	C:\wamp64\www\tp5\application\database.php(数据库扩展配置)
	读取config('database');
	C:\wamp64\www\tp5\application\extra(用户自定义扩展配置目录)
	读取config('配置文件名');

4.场景配置
	C:\wamp64\www\tp5\application\config.php
	'app_status'=>''//场景配置项

5.模块配置
	在前台模块下新建config.php
	C:\wamp64\www\tp5\application\index\config.php

6.动态配置
	添加配置项config(key,value);

优先级
动态配置>模块配置>场景配置>扩展配置>应用配置>惯例配置
===============================================================================
配置系统环境变量
在根目录(C:\wamp64\www\tp5)下新建.env文件
书写变量
	name=user1
	password=123
读取系统环境变量
	\think\Env::get('name',"默认值")

前后台分离
1.新建后台入口文件C:\wamp64\www\tp5\public\admin.php

内容
define('APP_PATH', __DIR__ . '/../application/');
//绑定后台模块
define("BIND_MODULE","admin");
// 加载框架引导文件
require __DIR__ . '/../thinkphp/start.php';
在index.php中添加

//绑定前台模块
define("BIND_MODULE","index");

关闭后台路由
在后台入口文件中添加(C:\wamp64\www\tp5\public\admin.php)
//关闭后台模块路由
\think\App::route(false);

==============================================================================
设置路由规则(C:\wamp64\www\tp5\application\route.php)
use think\Route;
Route::rule('输入的地址','实际的地址','请求类型','路由参数(数组)','变量规则(数组)')

Route::rule('test','index/index/test/:id','get',arr,['id'=>'\d{1,3}']);
id必须是1~3为数字,正则限制
arr=[
	'method'=>'get',//请求类型
	'ext'=>'html',//后缀 
]


设置路由
	1.静态路由
		Route::rule('test','index/index/test');
	2.路由带参数
		Route::rule('test/:id','index/index/test');/带了一个id,获取参数用input()方法
	3.可选参数的路由
		Route::rule('test/:id/[:page]','index/index/test');//[]内的为可选参数
	4.动态路由
		Route::rule(':id/:page','index/index/test');
	5.完全匹配路由
		Route::rule('test$','index/index/test');在后面加一个$,表示只能后面不能加别的访问
	6.带额外参数
		Route::rule('test','index/index/test?id=1');
设置路由请求类型
	Route::rule('test','index/index/test','get|post');//get或者post
批量注册路由
	Route::rule([
		"index"=>"index/index/index",
		"test"=>"index/index/test"
	],"","get");

资源路由
Route::resource('blog','index/blog');//前台的blog控制器

请求方式	路由地址		默认访问的方法 		
get		 	blog 			index
get 		blog/create 	create
post 		blog 			save
get 		blog/:id 		read
get  		blog/:id/edit 	edit
put 		blog/:id 		update
delete 		blog/:id 		delete
====================================================================================
生成路由地址
url('需要生成地址的方法');
url('index/index/test');

use \think\Url
Url::root('index.php');//添加入口文件
url('index/index/test#name@yijia',['id'=>'1']);
yijia为域名
name为锚点
id为参数
index模块的index控制器的test方法
==============================================================================
控制器的初始化
//申明命名空间
namespace app\index\controller;//就是当前控制器所在的路径
//申明控制器
class User{
	//方法
	public function index(){
		return '我是user控制器';
	}
}
//继承Controller控制器
namespace app\index\controller
use think\Controller;
class User extends Controller{//继承
	//执行其他的方法都会先执行_initialize方法
	public function _initialize(){
		echo "我会先执行";
	}
	//前置操作
	protected $beforeActionList=[
		'one',//所有方法执行前都会执行one方法
		"tow"=>["only"=>"index"],//仅仅只有index方法执行前后执行tow方法
		"three"=>["except"=>"getUser"]//除了getUser,其他方法执行前都会先执行three方法
	]
	//空操作,对于访问不存在的方法会自动执行空操作.
	public _empty(){
		$this->redirect("index/index");//重定向到首页
	}
	//方法
	public function index(){
		return '我是user控制器';
	}
}
//空控制器
application/config中
// 默认的空控制器名
'empty_controller'       => 'Error',
当访问不存在的控制器时会自动访问Error控制器
创建Error控制器
C:\wamp64\www\tp5\application\index\controller\Error.php

=========================================================================
数据库连接
方法一:
数据库配置
application/database.php
// 服务器地址
'hostname'        => '127.0.0.1',
// 数据库名
'database'        => 'mysite',
// 用户名
'username'        => 'root',
// 密码
'password'        => '123',
方法二
使用方法连接
Db::connect('数据库类型://用户名:密码@主机名:端口/数据库名#字符集');
Db::connect('mysql://root:1234@127.0.0.1:3306/thinkphp#utf8');

每个控制器单独配置数据库
在改模块下新建一个database.php(重复的内容无需配置)
return [
    // 服务器地址
    'hostname'    => '192.168.1.100',
    // 数据库名
    'database'    => 'admin',  
    // 开启断线重连
    'break_reconnect' => true,  
];

// 引入db类
use think\Db;
原生sql语句
//查询操作
Db::query("select * form user where id>?",[5]);//查询user表中id>5的
//增加数据,或者更新数据,删除数据
Db::execute("insert into user (username,password) values (?,?)",['user1',123]);
------------------------------------------------------------------------------
// 查询构造器
查询一条数据
$row=Db::table('user')->where("id",1)->find();//查看user表id=1的数据
$rows=Db::table('user')->select();//查看user表
助手函数
$row=db("user",[],false)->where("id",1)->find();
--------------------------------------------------------------------------
增加数据
Db::table('user')->insert(['username'=>'user1',"password"=>123]);//成功则返回新增数据的数量,一般为1
Db::table('user')->getLastInsID();//获取新增数据的自增主键
//新增一条数据并返回主键
Db::table("user")->insertGetId(['username'=>'user1',"password"=>123]);
// 一次添加多条数据
$data=[
	['username'=>'user1',"password"=>123],
	['username'=>'user1',"password"=>456],
	['username'=>'user1',"password"=>789]
];
Db::table("user")->insertAll($data);//返回添加成功的条数
----------------------------------------------------------------------------
修改数据
Db::table("user")->where("id","1")->update(['username'=>'user111']);//把user表中id为1的username改为user111,返回成功的条数
---------------------------------------------------------------------------
删除数据
Db::table("user")->where("id",1)->delete();//删除user表中id=1的数据
Db::table("user")->where("id",">",20)->delete();//删除user表中id>20的数据,当成功的条数

--------------------------------------------------------------------------------
查询方法
where()//条件
whereOr()//进行or查询,或者
alias('别名')//给数据表起别名
field('字段1','字段2 as 别名');//指定返回的字段
order("id desc");//排序
limit("索引","个数");//截取
page('当前页','每页个数');//分页查询
group("字段");//分组
having("条件");//配合group分组条件查询
column("字段1,字段2");//获取字段值

==================================================================================
使用模板文件
新建模板文件C:\wamp64\www\tp5\application\index\view\User\index.html
新建控制器C:\wamp64\www\tp5\application\index\controller\User.php
方法一:使用view类
namespace app\index\controller;
use think\View;
class User{
	function index(){
		$view=new View();
		return $view->fetch();
	}
}
方法二:继承Controller控制器
namespace app\index\controller;
use think\Controller;
class User extends Controller{
	function index(){
		return $this->fetch();
	}
}
助手函数
return view();
===============================================================================
页面跳转和重定向(需要继承Controller控制器)
view中
<form action="{:url('index/user/login')}" method="post">
	<input type="text" name="username">
	<input type="password" name="password">
	<button type="submit">登录</button>
</form>

// 成功跳转
$this->success("提示信息","跳转地址","返回的数据","等待的时间","发送的header");
$this->success("登录成功",url("index/index"));//跳转到首页
//失败跳转
$this->error("提示信息","跳转地址","返回的数据","等待的时间","发送的header");
$this->error("登录失败")//默认跳转到上一个页面

application/config.php指定了提示页面
// 默认跳转页面对应的模板文件
'dispatch_success_tmpl'  => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
'dispatch_error_tmpl'    => THINK_PATH . 'tpl' . DS . 'dispatch_jump.tpl',
// 跳转提示页面
C:\wamp64\www\tp5\thinkphp\tpl\dispatch_jump.tpl
接受的数据
$data要返回的数据
$msg页面提示信息
$code返回的,成功是1,失败是0
$wait跳转等待时间
$url跳转的地址


//重定向
$this->redirect("重定向地址","额外参数","状态码302","隐式传参");//前面的为get参数,后面的为post参数
=============================================================================
获取当前的请求信息
1.使用助手函数
$request=request();
2.使用系统类
use think\Request;//(单例模式);
$request=Request::instance();

$request->domain();//获取当前域名
$request->baseFile();//获取当前入口文件
$request->url();//不含域名的url地址
$request->url(true);//完整的url地址
$request->baseUrl();//
$request->pathinfo();//
$request->path();//
$request->ext();//url地址中的后缀信息

$request->module();//返回或设置当前的模块名称
$request->controller();//返回或设置当前的控制器名称
$request->action();//返回或设置当前的方法名词

$request->method();//请求方法
$request->type();//资源类型
$request->ip();//ip地址
$request->isAjax();//是不是Ajax请求
$request->param();//请求参数

$request->route();//路由信息
$request->dispatch();//调度信息

$request->has("id","get");//get方式的id参数是否存在
$request->get("id");//获取get类型的id参数值
$request->post("name");
// 检查变量是否存在
input("?get.id");//get方式的id参数是否存在
input("get.id");//获取get方式的id参数值
input("post.");//获取post的所有参数
====================================================================
变量的过滤
1.配置文件设置全局过滤
'default_filter'         => 'htmlspecialchars,strip_tags'//将特殊字符转为实体,单双引号转义
2.使用request对象过滤
$request->filter(["htmlspecialchars","strip_tags"]);
------------------------------------------------------------------
变量的修改
$request->get(["id"=>10]);//把id修改成10;
$request->post(["name"=>"user"]);//把name改为user
--------------------------------------------------------------
判断请求类型
$request->isGet();//是不是get请求
$request->isPost();//是不是post请求
$request->isPut();//是不是Put请求
$request->isDelete();//是不是Delete请求
$request->isAjax();//是不是Ajax请求
$request->isMobile();//是不是手机方法
-------------------------------------------------------------
请求伪装
1.配置文件设置请求伪装的变量名
'var_method'             => '_method',
2.在表单中添加_method变量,值为请求的类型 method="post"
<input type="hidden" name="_method" value="PUT" >
3.表单提交时会自动被系统识别为PUT请求;

伪装Ajax请求
1.配置文件
'var_ajax'               => '_ajax',
http://localhost/index?_ajax=1 //带上_ajax即可;

==================================================================
模型
1.新建一个模型,名字一般和数据表名一致
C:\wamp64\www\tp5\application\index\model\User.php
namespace app\index\model;
use think\Model;
class User extends Model{
	// 设置当前模型对应的完整数据表名称
	protected $table = 'user';

	// 设置当前模型的数据库连接
    protected $connection = [
        // 数据库类型
        'type'        => 'mysql',
        // 服务器地址
        'hostname'    => '127.0.0.1',
        // 数据库名
        'database'    => 'mysite',
        // 数据库用户名
        'username'    => 'root',
        // 数据库密码
        'password'    => '123',
        // 数据库编码默认采用utf8
        'charset'     => 'utf8',
        // 数据库表前缀
        'prefix'      => '',
        // 数据库调试模式
        'debug'       => false,
    ];
}

//控制器中实例化模型
use app\index\model\User;
$user=new User;

// 使用助手函数
$user=model("index/view/user");
-------------------------------------------------------------------
// 获取单条数据
$user->get(['id'=>'1'])->toArray();//获取id=1的数据
$user->where("id","1")->find()->toArray();//获取id=1的数据
//获取多条数据
$list=$user->where("id",">","1")->select();
foreach ($list as $key => $value) {
	dump($value->toArray());
}

// 解决select无法使用toArry
C:\wamp64\www\tp5\application\database.php中
// 数据集返回类型
'resultset_type'  => '\think\Collection',

---------------------------------------------------------------------
// 增加数据
$user->data([
	"name"=>"user",
	"password"=>123
])
$user->save();
//获取自增id
$user->id;
//批量增加数据
$list=[
	["name"=>"user","password"=>123],
	["name"=>"user","password"=>123],
	["name"=>"user","password"=>123]
]
$user->saveAll($list);
--------------------------------------------------------------
// 更改数据
更改id=1的数据,第二个参数为条件;
$user->save([
	"name"=>"user1",
	"password"->456
],["id"=>"1"]);
批量更改数据
$list=[
	["id"=>1,"name"=>"user1","password"=>456],
	["id"=>2,"name"=>"user2","password"=>123456]
]
$user->saveAll($list);
$user->where("id",1)->update(['password'=>456]);
-------------------------------------------------------------------------
删除数据
$user->destroy(['id'=>1]);//删除id=1的数据
$user->where("id",">",5)->delete();//删除id>5的数据
=======================================================================
内置标签

volist标签,用于查询数据的循环输出
{volist name="被循环的变量" key="key值" id="每一项" offset="开始位置,默认0" length="循环的次数"}

{/volist}

foreach标签
{foreach $items as $item} 
    
{/foreach}

for标签
{for start="开始值" end="结束值" comparison="" step="步进值" name="每一项 默认i" }
{/for}

比较标签
eq 		等于
neq 	不等于
gt 		大于
egt 	大于等于
lt 		小于
elt 	小于等于
heq 	恒等于
nheq 	不恒等于

当变量等于指定值时输出
{eq name="变量" value="指定值"}value{/eq}

{eq name="b" value="$a"}
$b等于$a
{else/}
$b不等于$a
{/eq}


=======================================================================
验证码
验证码的配置
原始配置
C:\wamp64\www\tp5\vendor\topthink\think-captcha\src\Captcha.php
在配置文件中配置
C:\wamp64\www\tp5\application\config.php
添加一项
'captcha'=>[
	//验证码字符集合
	"codeSet"=>"123",
	//验证码字体大小
	'fontSize'=>25,
	//是否混淆曲线
	'useCurve'=>true,
	//验证码高度
	'imageH'=>30,
	//验证码宽度
	'imagew'=>100,
	//验证码位数
	'length'=>5,
	//验证成功是否重置
	'reset'=>true
]


验证码的使用
<img src="{:captcha_src()}" alt="">

验证码的验证
//验证码验证
$code=input('post.code');
//验证码正确
if(captcha_check($code)){
	echo "正确";
}else{//验证码错误
	echo "错误";
}
==============================================================================
模板赋值
// 单个赋值
$this->assign('name','ThinkPHP');
//批量赋值
$this->assign([
            'name'  => 'ThinkPHP',
            'email' => 'thinkphp@qq.com'
        ]);
=============================================================================
缓存 cache
使用吸引类
use think\Cache;
1.设置缓存
Cache::set('名字',值,过期时间);
助手函数
cache('名字',值,过期时间);

2.获取缓存
Cache::get('名字');
cache('名字');

3.删除缓存
Cache::rm("名字");
cache("名字",NULL);

4.清空缓存
Cache::clear();

==============================================================================
session 
系统类
use think\Session;
1.设置session
Session::set("名字",值);
助手函数
session("名字",值);

2.获取session
Session::get("名字",值);
session("名字");

3.判断session
Session::has('名字');
session("?名字");

4.删除session
Session::delete('名字');
session('名字',null);

5.清空session
Session::clear();
session(null);

================================================================
cookie
系统类
use think\Cookie;
1.设置session
Cookie::set("名字",值,过期时间);
助手函数
cookie("名字",值,过期时间);

2.获取session
Cookie::get("名字",值);
cookie("名字");

3.判断session
Cookie::has('名字');
cookie("?名字");

4.删除session
Cookie::delete('名字');
cookie('名字',null);

5.清空session
Cookie::clear();
cookie(null);

