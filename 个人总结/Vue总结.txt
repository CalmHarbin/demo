1.引入文件
<script src="vue.min.js"></script>

2.创建对象
var vm=new Vue({
		el:"#myapp",  //绑定的元素 
		data:{    //属性
			name:"user",
		},
		methods:{   //方法
			get:function(){
					console.log("my name is "+this.name+"!");//方式里面是有属性,this.属性
					return ;
				}
			}
		},
		filters:{  //过滤器
			uppercase:function(data){
				return data.toUpperCase();
			}
		},
		computed:{   //计算属性,调用时不能加()
			sum:function(){
				return this.age*1+12;
			}
		},
		watch:{//数据监听
			数据:function(新值,旧值){

			}
			数据:{
				handler:function(新值,旧值){

				},
				deep:true//对象内部的属性监听，也叫深度监听 
			}
		}
	})

组件
//必须在vue实例化对象之前
Vue.component('组件名',{
	props:,//验证数据
	template:'模板html内容',
	data:funciton(){},
	methods:{}
})

Vue.component("zh",{
	template:"<h1 @click='addCom()'>我是组件,我也有个num,我的值是{{num}},触发addCOM函数才能增加我的值,点我有惊喜</h1>",
	data:function(){
		return {
			num:10
		}
	},
	methods:{
		addCom:function(){
			this.num++;
			this.$emit("one");   //触发一个one的自定义事件
		}
	}
});
===================================================================================

组件的使用
<zh v-on:one='add()'></zh>//one为自定义事件

事件的绑定
<button v-on:click='fn()'></button>
<button @click='fn()'></button>

内置指令
v-html="属性";//输出一段html
<div v-html="html"></div>//data数据中html:"<h1>我是html</h1>",

v-bind绑定一个值
<a v-bind:href="attr" target="top">点我</a>//data数据中attr:"https://www.baidu.com",
缩写:href="attr"

样式
传一个json,当值为真是添加key作为类
<p v-bind:class="{box:数据,'text-danger':true}">我绑定了一个类</p>
内联样式
<div v-bind:style="{ color: 数据, fontSize: 数据 + 'px' }"></div>


v-model双向数据绑定
<input type="text" v-model="name">//data数据中name:"user",

v-on绑定一个事件

当后面值为真时才生成DOM节点
v-if
v-else-if
v-else
<p v-if="num===0">我是v-if 值为0</p>//data数据总num:1,
<p v-else-if="num===1">我是v--else-if 值为1</p>
<p v-else-if="num===2">我是v-else-if 值为2</p>
<p v-else>我是v-else 值不是012</p>
最终显示:我是v--else-if 值为1

v-show="true"//显示该元素

v-for="itme in items";//循环数组
data中arr:['user1','user2','user3'],
<ul>
	<li v-for="(value,index) in arr">我的索引是{{index}}---我的值是{{value}}</li>
</ul>
结果
我的索引是0---我的值是user1
我的索引是1---我的值是user2
我的索引是2---我的值是user3

v-for="(val,key,idx) in obj";//循环对象
data中obj:{
			'username':'user',
			'password':'123',
			'age':'20'
		},
<!-- v-for不会重复template标签 -->
<template v-for="(value,key) in obj">
	<label>{{key}}</label>	
	<p>{{value}}</p>
</template>
结果
username
user

password
123

age
20

v-for="n in number";//循环数字;从1开始
<p v-for="n in 4">{{n}}</p>
结果
1
2
3
4

事件修饰符
.stop 	阻止事件冒泡
.prevent阻止默认行为
.capture使用事件捕获模式
.self 	当事件在该元素本身(而不是子元素)触发回调函数
.once 	事件只能执行一次
按键修饰符
.键值 	表示哪一个按键
.enter 	回车键
.tab 	tab键
.delete delete键和退格键
.esc 	Esc键
.space  空格键
.up 	上
.down 	下
.left 	左
.right 	右
.ctrl 	Ctrl键
.alt 	Alt键
shift 	shift键
.meta 	
<button v-on:keyDown.enter="alert(1)">事件修饰符</button>

v-model修饰符
.lazy 	在change事件中同步
.number 将值转化为Number类型,如果结果为NaN则返回原值
.trim 	去掉首位空格

v-once当数据改变时，该指令下的内容不会更新

自定义事件
绑定自定义事件
v-on:事件名="fn($event)";//$event表示事件对象
执行自定义事件
触发事件对象.$emit(事件名,参数);

钩子函数
beforeCreate:组件实例化之前触发
created:组件实例化完毕触发
beforeMount:组件挂在前,虚拟Dom配置完毕后,页面还未渲染
mounted:组件挂在后,此方法执行后页面开始渲染
beforeUpdate:组件更新前,
updated:组件更新后
beforeDestroy:组件销毁前
destroyed:组件销毁后


自定义指令
Vue.directive('指令名',{
	钩子函数:fn()
})

自定义过滤器
Vue.filter('名字',funciton(){
	
})

数据监听
//vm表示Vue的实例
vm.$watch("监听的数据",function(变化后的值,变化前的值){  
    console.log(val)  
})
===================================================================================


Vue脚手架
https://cn.vuejs.org/

组件范围内的样式
<style scoped></style>

组件传值
子组件向父组件传值
通过自定义事件传值
在父组件中绑定一个自定义事件
	v-on:事件名="fn($event)";//$event表示事件对象
在子组件中触发该事件,并且把数据最为参数传过去
	this.$emit(事件名);

父组件向子组件传值
在子组件标签上绑定一个自定义属性,属性值为父组件中的数据,
在子组件中加入
props:{
	父组件中的自定义属性:{
		type:Array,//属性值类型,
		required:true
	}
};
===================================================================================

路由
安装路由模块
cnpm install vue-router -D
在main.js中引入路由模块
import VueRouter from 'vue-router'
启动路由
Vue.use(VueRouter)
配置路由
const router=new VueRouter({
	routes:[
		{
			path:'/Root',//路由地址
			component:Root,//组件名,需要先引入组件,import Root from '组件地址';
			childrens:[//子路由
				path:'root1',//路由地址,此时的访问路由为/Root/root1
				component:''//组件名
			]
		},
		{
			path:'/home',//路由地址
			component:Home//组件名,需要先引入组件,import Home from '组件地址';
		}
	],
	mode:"history"//去掉地址中的#
})
使用配置的路由
new Vue({
	router,
})
展示标签
<router-view></router-view>
路由跳转,to的值为路由地址
<keep-alive>缓存数据
	<router-link to="/home"></router-link>
</keep-alive>
动态路由,
定义路由时传参数id
{
	path:'/Root:id',//路由地址
	component:Root,//组件名,需要先引入组件,import Root from '组件地址';
}
页面跳转时传递参数id
<router-link to="/Root/id"></router-link>
接受动态路由的参数
export default{
    mounted(){
        console.log(this.$route);
        console.log(this.$route.params.id);
    }
}

路由之间传递参数query方式
<router-link v-bind:to="{path:'/Root',query:{id:123}}"></router-link>
组件在mounted方法中接受
export default{
    mounted(){
        console.log(this.$route);
        console.log(this.$route.query.id);
    }
}

js脚本中路由跳转
方式一
this.$router.push({path:'路由地址'});
方式二,带参数
this.$router.replace({path:'路由地址',query:{参数}});

前进和后退
this.$router.go(1);//前进
this.$router.go(-1);//后退

===================================================================================
http请求
下载模块
npm install vue-resource --save-dev
引入模块
import VueResource from 'vue-resource'
启动模块
Vue.use(VueResource)
使用http请求
get请求
this.$http.get(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})

post请求
this.$http.post(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})

jsonp请求
this.$http.jsonp(url,{配置}).then(function(res){//成功回调
	
},function(res){//失败回调
	
})

跨域
打开config/index.js
把其中的	proxyTable: {}改为
proxyTable: {
	'/apis': {//  /apis名字可以任意改
            // 测试环境
            target: 'https://goods.footer.com',  // 接口域名,需要http
            changeOrigin: true,  //是否跨域
            pathRewrite: {
                '^/apis': ''   //需要rewrite重写的,
            }              
        }
}

使用fetch.js,使用了promise对象
fetch("/apis/请求地址",{//此时请求地址不需要写域名了,因为index.js中以及配置了
	method:'post',//请求方式
}).then(function(res){
	return res.json();
}).then(function(res){
	console.log(res);
})

=======================================================================
动画
<transition name="fade"></transition>
过渡的类名
fade-enter 	过渡开始前的类			enter-class=""
fade-enter-active过渡过程中的类 		enter-active-class=""
fade-enter-to 过渡结束时的类 			enter-to-class=""
fade-leave离开过渡前的类 				leave-class=""
fade-leave-active离开过渡过程中的类 	leave-active-class=""
fade-leave-to离开过渡结束时的类 		leave-to-class=""

属性
v-bind:duration="{
	enter:500,leave:800//过渡时间
}"